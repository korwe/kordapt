type_api(type) ::= <<
name: <type:type_name()>
<if(type.inheritsFrom)>inherits_from: <type.inheritsFrom:type_name()><endif>
attributes:
<type.attributes:type_attribute()>
>>

type_attribute(attribute) ::= <<

- name: <attribute.name>
  type: <attribute.type:type_name()>
  description: <attribute.description>
>>

type_name(type) ::= <<
<type.apiDefinitionString>
>>

bean(type, imports) ::= <<
package <type.packageName>;

<imports:import_template()>

/**
 * This file was generated using Kordapt
 */

<type.annotations:annotation()>
public class <type.name><if(type.inheritsFrom)> extends <type.inheritsFrom.name><endif> {
<type.attributes:bean_attribute_definition()>

<type.attributes:bean_getter_setter()>
}
>>

bean_attribute_definition(attribute) ::= <<

    private <attribute.type.declarationString> <attribute.name>;
>>

bean_getter_setter(attribute) ::= <<

    <attribute.annotations:annotation()>
    public <attribute.type.declarationString> get<attribute.capitalizedName>(){
        return <attribute.name>;
    }

    public void set<attribute.capitalizedName>(<attribute.type.name> <attribute.name>){
        this.<attribute.name> = <attribute.name>;
    }


>>


import_template(im) ::= <<
import <im>;

>>

annotation(a) ::= <<

@<a.name><if(a.annotationAttributes)>(<a.annotationAttributes.keys:{k | <k>="<a.annotationAttributes.(k)>"}; separator=", ">)<elseif(a.values)>({<a.values:{v | <v:annotation()>}; separator=",\n">})<else><a.value><endif>
>>